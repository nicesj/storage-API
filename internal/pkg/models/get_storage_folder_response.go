// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetStorageFolderResponse get storage folder response
// swagger:model getStorageFolderResponse
type GetStorageFolderResponse struct {

	// files
	Files []*GetStorageFolderResponseFilesItems0 `json:"files"`

	// root folder
	Root string `json:"root,omitempty"`
}

// Validate validates this get storage folder response
func (m *GetStorageFolderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetStorageFolderResponse) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetStorageFolderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetStorageFolderResponse) UnmarshalBinary(b []byte) error {
	var res GetStorageFolderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetStorageFolderResponseFilesItems0 get storage folder response files items0
// swagger:model GetStorageFolderResponseFilesItems0
type GetStorageFolderResponseFilesItems0 struct {

	// mime type
	Mime string `json:"mime,omitempty"`

	// file or folder name
	Name string `json:"name,omitempty"`

	// filesize in bytes
	Size float64 `json:"size,omitempty"`

	// last modified time of the object
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type of an object,
	// * d - folder
	// * f - file
	// * s - special
	// * e - error
	// if the target is a symbolic link, there would be a postfix "l"(L) for each type.
	//
	// Enum: [d f s e dl fl sl el]
	Type string `json:"type,omitempty"`
}

// Validate validates this get storage folder response files items0
func (m *GetStorageFolderResponseFilesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetStorageFolderResponseFilesItems0) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

var getStorageFolderResponseFilesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["d","f","s","e","dl","fl","sl","el"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getStorageFolderResponseFilesItems0TypeTypePropEnum = append(getStorageFolderResponseFilesItems0TypeTypePropEnum, v)
	}
}

const (

	// GetStorageFolderResponseFilesItems0TypeD captures enum value "d"
	GetStorageFolderResponseFilesItems0TypeD string = "d"

	// GetStorageFolderResponseFilesItems0TypeF captures enum value "f"
	GetStorageFolderResponseFilesItems0TypeF string = "f"

	// GetStorageFolderResponseFilesItems0TypeS captures enum value "s"
	GetStorageFolderResponseFilesItems0TypeS string = "s"

	// GetStorageFolderResponseFilesItems0TypeE captures enum value "e"
	GetStorageFolderResponseFilesItems0TypeE string = "e"

	// GetStorageFolderResponseFilesItems0TypeDl captures enum value "dl"
	GetStorageFolderResponseFilesItems0TypeDl string = "dl"

	// GetStorageFolderResponseFilesItems0TypeFl captures enum value "fl"
	GetStorageFolderResponseFilesItems0TypeFl string = "fl"

	// GetStorageFolderResponseFilesItems0TypeSl captures enum value "sl"
	GetStorageFolderResponseFilesItems0TypeSl string = "sl"

	// GetStorageFolderResponseFilesItems0TypeEl captures enum value "el"
	GetStorageFolderResponseFilesItems0TypeEl string = "el"
)

// prop value enum
func (m *GetStorageFolderResponseFilesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getStorageFolderResponseFilesItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetStorageFolderResponseFilesItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetStorageFolderResponseFilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetStorageFolderResponseFilesItems0) UnmarshalBinary(b []byte) error {
	var res GetStorageFolderResponseFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
