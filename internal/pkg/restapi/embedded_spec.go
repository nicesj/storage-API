// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a API specification for [futuremobile.net](https://futuremobile.net)",
    "title": "Storage",
    "version": "0.0.1"
  },
  "host": "futuremobile.net",
  "basePath": "/storage",
  "paths": {
    "/readFile": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "storage.read",
              "storage.admin"
            ]
          }
        ],
        "description": "Streaming a file contents to the client",
        "produces": [
          "application/octect-stream",
          "text/plain"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Download a file",
        "operationId": "storageReadFile",
        "parameters": [
          {
            "type": "string",
            "description": "A file what would be transferred",
            "name": "f",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "download a file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/readFolder": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "storage.read",
              "storage.admin"
            ]
          }
        ],
        "description": "Get a list of files and folders in a given path (folder)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Get a list of files and folders",
        "operationId": "storageReadFolder",
        "parameters": [
          {
            "type": "string",
            "description": "A path of target folder",
            "name": "r",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of files or folders",
            "schema": {
              "$ref": "#/definitions/getStorageFolderResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/writeFile": {
      "post": {
        "security": [
          {
            "OAuth2": [
              "storage.write",
              "storage.admin"
            ]
          }
        ],
        "description": "Upload multiple files into the given path (folder)",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Upload files to the storage",
        "operationId": "storageWriteFile",
        "parameters": [
          {
            "type": "string",
            "description": "A folder (path) to upload files",
            "name": "folder",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "name": "files",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of file uploading",
            "schema": {
              "$ref": "#/definitions/storageResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "badRequest": {
      "type": "string",
      "example": "Bad Request"
    },
    "conflict": {
      "type": "string",
      "example": "Conflict"
    },
    "created": {
      "type": "string",
      "example": "Created"
    },
    "forbidden": {
      "type": "string",
      "example": "Forbidden"
    },
    "getStorageFolderResponse": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "mime": {
                "description": "mime type",
                "type": "string"
              },
              "name": {
                "description": "file or folder name",
                "type": "string",
                "example": "hello.txt"
              },
              "size": {
                "description": "filesize in bytes",
                "type": "number",
                "format": "unit64"
              },
              "time": {
                "description": "last modified time of the object",
                "type": "string",
                "format": "date-time"
              },
              "type": {
                "description": "type of an object,\n* d - folder\n* f - file\n* s - special\n* e - error\nif the target is a symbolic link, there would be a postfix \"l\"(L) for each type.\n",
                "type": "string",
                "enum": [
                  "d",
                  "f",
                  "s",
                  "e",
                  "dl",
                  "fl",
                  "sl",
                  "el"
                ]
              }
            }
          }
        },
        "root": {
          "description": "root folder",
          "type": "string"
        }
      }
    },
    "grantType": {
      "type": "string",
      "example": "password"
    },
    "internalServerError": {
      "type": "string",
      "example": "Internal Server Error"
    },
    "notFound": {
      "type": "string",
      "example": "Not Found"
    },
    "redirectURL": {
      "type": "string",
      "example": "https://helloworld.com/loggedIn"
    },
    "storageResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "filename": {
            "description": "Uploaded filename",
            "type": "string",
            "x-nullable": true,
            "example": "myImage.jpg"
          },
          "root": {
            "description": "A path where the uploaded files are stored",
            "type": "string",
            "x-nullable": true,
            "example": "/image"
          },
          "status": {
            "description": "Status of uploading file. [ 200, 400, 403, 500 ]",
            "type": "number",
            "example": 200
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://futuremobile.net/oauth2/authorize",
      "tokenUrl": "https://futuremobile.net/oauth2/token",
      "scopes": {
        "storage.admin": "Grants admin access for the storage",
        "storage.read": "Grants read access for the storage",
        "storage.write": "Grants write access for the storage"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a API specification for [futuremobile.net](https://futuremobile.net)",
    "title": "Storage",
    "version": "0.0.1"
  },
  "host": "futuremobile.net",
  "basePath": "/storage",
  "paths": {
    "/readFile": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "storage.read",
              "storage.admin"
            ]
          }
        ],
        "description": "Streaming a file contents to the client",
        "produces": [
          "application/octect-stream",
          "text/plain"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Download a file",
        "operationId": "storageReadFile",
        "parameters": [
          {
            "type": "string",
            "description": "A file what would be transferred",
            "name": "f",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "download a file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/readFolder": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "storage.read",
              "storage.admin"
            ]
          }
        ],
        "description": "Get a list of files and folders in a given path (folder)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Get a list of files and folders",
        "operationId": "storageReadFolder",
        "parameters": [
          {
            "type": "string",
            "description": "A path of target folder",
            "name": "r",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of files or folders",
            "schema": {
              "$ref": "#/definitions/getStorageFolderResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/writeFile": {
      "post": {
        "security": [
          {
            "OAuth2": [
              "storage.write",
              "storage.admin"
            ]
          }
        ],
        "description": "Upload multiple files into the given path (folder)",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Upload files to the storage",
        "operationId": "storageWriteFile",
        "parameters": [
          {
            "type": "string",
            "description": "A folder (path) to upload files",
            "name": "folder",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "name": "files",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of file uploading",
            "schema": {
              "$ref": "#/definitions/storageResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "badRequest": {
      "type": "string",
      "example": "Bad Request"
    },
    "conflict": {
      "type": "string",
      "example": "Conflict"
    },
    "created": {
      "type": "string",
      "example": "Created"
    },
    "forbidden": {
      "type": "string",
      "example": "Forbidden"
    },
    "getStorageFolderResponse": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "mime": {
                "description": "mime type",
                "type": "string"
              },
              "name": {
                "description": "file or folder name",
                "type": "string",
                "example": "hello.txt"
              },
              "size": {
                "description": "filesize in bytes",
                "type": "number",
                "format": "unit64"
              },
              "time": {
                "description": "last modified time of the object",
                "type": "string",
                "format": "date-time"
              },
              "type": {
                "description": "type of an object,\n* d - folder\n* f - file\n* s - special\n* e - error\nif the target is a symbolic link, there would be a postfix \"l\"(L) for each type.\n",
                "type": "string",
                "enum": [
                  "d",
                  "f",
                  "s",
                  "e",
                  "dl",
                  "fl",
                  "sl",
                  "el"
                ]
              }
            }
          }
        },
        "root": {
          "description": "root folder",
          "type": "string"
        }
      }
    },
    "grantType": {
      "type": "string",
      "example": "password"
    },
    "internalServerError": {
      "type": "string",
      "example": "Internal Server Error"
    },
    "notFound": {
      "type": "string",
      "example": "Not Found"
    },
    "redirectURL": {
      "type": "string",
      "example": "https://helloworld.com/loggedIn"
    },
    "storageResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "filename": {
            "description": "Uploaded filename",
            "type": "string",
            "x-nullable": true,
            "example": "myImage.jpg"
          },
          "root": {
            "description": "A path where the uploaded files are stored",
            "type": "string",
            "x-nullable": true,
            "example": "/image"
          },
          "status": {
            "description": "Status of uploading file. [ 200, 400, 403, 500 ]",
            "type": "number",
            "example": 200
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://futuremobile.net/oauth2/authorize",
      "tokenUrl": "https://futuremobile.net/oauth2/token",
      "scopes": {
        "storage.admin": "Grants admin access for the storage",
        "storage.read": "Grants read access for the storage",
        "storage.write": "Grants write access for the storage"
      }
    }
  }
}`))
}
