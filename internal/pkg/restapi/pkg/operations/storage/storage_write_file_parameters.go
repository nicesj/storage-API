// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStorageWriteFileParams creates a new StorageWriteFileParams object
// no default values defined in spec.
func NewStorageWriteFileParams() StorageWriteFileParams {

	return StorageWriteFileParams{}
}

// StorageWriteFileParams contains all the bound params for the storage write file operation
// typically these are obtained from a http.Request
//
// swagger:parameters storageWriteFile
type StorageWriteFileParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	Files []strfmt.Base64
	/*A folder (path) to upload files
	  In: formData
	*/
	Folder *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewStorageWriteFileParams() beforehand.
func (o *StorageWriteFileParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdFiles, fdhkFiles, _ := fds.GetOK("files")
	if err := o.bindFiles(fdFiles, fdhkFiles, route.Formats); err != nil {
		res = append(res, err)
	}

	fdFolder, fdhkFolder, _ := fds.GetOK("folder")
	if err := o.bindFolder(fdFolder, fdhkFolder, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFiles binds and validates array parameter Files from formData.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *StorageWriteFileParams) bindFiles(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvFiles string
	if len(rawData) > 0 {
		qvFiles = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	filesIC := swag.SplitByFormat(qvFiles, "")
	if len(filesIC) == 0 {
		return nil
	}

	var filesIR []strfmt.Base64
	for i, filesIV := range filesIC {
		// items.Format: "byte"
		value, err := formats.Parse("byte", filesIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "files", i), "formData", "strfmt.Base64", value)
		}
		filesI := *(value.(*strfmt.Base64))

		// Format "byte" (base64 string) is already validated when parsed
		filesIR = append(filesIR, filesI)
	}

	o.Files = filesIR

	return nil
}

// bindFolder binds and validates parameter Folder from formData.
func (o *StorageWriteFileParams) bindFolder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Folder = &raw

	return nil
}
